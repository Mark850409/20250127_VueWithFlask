trigger:
  branches:
    include:
      - main
      - master
  paths:
    include:
      - '*'    # 監控所有檔案變更
    exclude:
      - '*.md' # 排除 markdown 檔案變更

resources:
  repositories:
    - repository: self
      type: github
      name: Mark850409/20250127_VueWithFlask  # 請替換成你的 GitHub 倉庫
      endpoint: github-connection  # Azure DevOps 中設定的 GitHub 服務連接名稱

variables:
  - group: flask-variables
  - group: vue-variables
  - name: DOCKER_BUILDKIT
    value: '1'
  - name: COMPOSE_DOCKER_CLI_BUILD  
    value: '1'
  - name: ACR_NAME
    value: 'recommendacr20250226'  # 請替換成你想要的 ACR 名稱
  - name: RESOURCE_GROUP
    value: 'recommend-group'  # 請替換成你的資源組名稱
  - name: AZURE_SUBSCRIPTION
    value: 'recommend-connection'  # 請替換成你的 Azure 訂用帳戶名稱
  - name: dockerRegistryServiceConnection
    value: 'recommend-docker-connection'  # 請替換成你的 Azure 訂用帳戶名稱
  - name: LOCATION
    value: 'eastasia'  # 請替換成你想要的區域
  - name: DEVOPS_SP_ID
    value: '499b84ac-1321-427f-aa17-267ca6975798'  # 請替換成你想要的環境名稱

stages:
- stage: Infrastructure
  displayName: 'Setup Infrastructure'
  jobs:
  - job: SetupACR
    displayName: 'Setup Azure Container Registry'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # 建立資源組（如果不存在）
    - task: AzureCLI@2
      displayName: 'Create Resource Group'
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # 檢查資源群組是否存在
          if ! az group exists --name $(RESOURCE_GROUP); then
            echo "Creating resource group..."
            az group create --name $(RESOURCE_GROUP) --location $(LOCATION)
          fi
    # 建立 ACR（如果不存在）
    - task: AzureCLI@2
      displayName: 'Create ACR'
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # 檢查 ACR 是否存在
          if ! az acr show --name $(ACR_NAME) --resource-group $(RESOURCE_GROUP) &>/dev/null; then
            echo "Creating ACR..."
            az acr create \
              --resource-group $(RESOURCE_GROUP) \
              --name $(ACR_NAME) \
              --sku Basic \
              --admin-enabled true
          else
            # 確保現有的 ACR 啟用了 admin
            echo "Enabling admin access for existing ACR..."
            az acr update --name $(ACR_NAME) --admin-enabled true
          fi
          
          # 獲取 ACR 登入資訊
          ACR_LOGIN_SERVER=$(az acr show --name $(ACR_NAME) --resource-group $(RESOURCE_GROUP) --query loginServer -o tsv)
          ACR_USERNAME=$(az acr credential show --name $(ACR_NAME) --resource-group $(RESOURCE_GROUP) --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name $(ACR_NAME) --resource-group $(RESOURCE_GROUP) --query "passwords[0].value" -o tsv)
          
          # 設定 pipeline 變數
          echo "##vso[task.setvariable variable=REGISTRY_NAME;isOutput=true]$ACR_LOGIN_SERVER"
          echo "##vso[task.setvariable variable=ACR_USERNAME;isOutput=true]$ACR_USERNAME"
          echo "##vso[task.setvariable variable=ACR_PASSWORD;isOutput=true;issecret=true]$ACR_PASSWORD"

      name: acrDetails

- stage: Build
  displayName: 'Build and Push'
  dependsOn: Infrastructure
  variables:
    REGISTRY_NAME: $[ stageDependencies.Infrastructure.SetupACR.outputs['acrDetails.REGISTRY_NAME'] ]
    ACR_USERNAME: $[ stageDependencies.Infrastructure.SetupACR.outputs['acrDetails.ACR_USERNAME'] ]
    ACR_PASSWORD: $[ stageDependencies.Infrastructure.SetupACR.outputs['acrDetails.ACR_PASSWORD'] ]
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push Docker Images'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # 檢出程式碼
    - checkout: self
              
    # 登入 ACR
    - task: Docker@2
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        command: 'login'
      displayName: 'Login to ACR'

    # 建立並推送前端映像
    - task: Bash@3
      displayName: 'Build and Push Frontend Image'
      inputs:
        targetType: 'inline'
        script: |
          docker build -t $(REGISTRY_NAME)/frontend:$(Build.BuildId) \
                      -t $(REGISTRY_NAME)/frontend:latest \
                      -f dockerfiles/frontend/Dockerfile_vue .
          docker push $(REGISTRY_NAME)/frontend:$(Build.BuildId)
          docker push $(REGISTRY_NAME)/frontend:latest

    # 建立並推送後端映像
    - task: Bash@3
      displayName: 'Build and Push Backend Image'
      inputs:
        targetType: 'inline'
        script: |
          docker build -t $(REGISTRY_NAME)/backend:$(Build.BuildId) \
                      -t $(REGISTRY_NAME)/backend:latest \
                      -f dockerfiles/backend/Dockerfile_python .
          docker push $(REGISTRY_NAME)/backend:$(Build.BuildId)
          docker push $(REGISTRY_NAME)/backend:latest

- stage: Deploy
  displayName: 'Deploy to Environment'
  dependsOn: Build
  variables:
    REGISTRY_NAME: $[ stageDependencies.Infrastructure.SetupACR.outputs['acrDetails.REGISTRY_NAME'] ]
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to Azure Container Apps'
    environment: 'production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          # 安裝 Azure CLI 擴充功能
          - task: AzureCLI@2
            displayName: 'Install Azure CLI extensions'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az extension add --name containerapp --upgrade
                az provider register --namespace Microsoft.App
                az provider register --namespace Microsoft.OperationalInsights

          # 登入 ACR
          - task: Docker@2
            displayName: 'Login to ACR'
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              command: 'login'

          # 確認 ACR 權限
          - task: AzureCLI@2
            displayName: 'Verify ACR Access'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # 確認可以存取 ACR
                az acr repository list --name $(ACR_NAME) --resource-group $(RESOURCE_GROUP)
                if [ $? -ne 0 ]; then
                  echo "無法存取 ACR，請檢查權限設定"
                  exit 1
                fi

          # 建立 Container Apps 環境和 Log Analytics
          - task: AzureCLI@2
            displayName: 'Create Container Apps Environment'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # 建立 Container Apps 環境
                az containerapp env create \
                  --name $(NODE_ENV) \
                  --resource-group $(RESOURCE_GROUP) \
                  --location $(LOCATION) 
                  # 建立 Container Apps 環境和 Log Analytics
          
          - task: AzureCLI@2
            displayName: 'Check & Assign ACR Pull Permission for Frontend & Backend'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                check_and_assign_identity() {
                  APP_NAME=$1
                  echo "Checking if $APP_NAME exists..."

                  # 確保 Container App 存在
                  if ! az containerapp show --name $APP_NAME --resource-group $(RESOURCE_GROUP) &>/dev/null; then
                    echo "Error: Container App '$APP_NAME' does not exist. Skipping identity assignment."
                    exit 1
                  fi

                  echo "Checking if $APP_NAME has Managed Identity..."
                  APP_ID=$(az containerapp show --name $APP_NAME --resource-group $(RESOURCE_GROUP) --query "identity.principalId" -o tsv)

                  if [ -z "$APP_ID" ]; then
                    echo "$APP_NAME does not have a managed identity. Assigning one..."
                    az containerapp identity assign --name $APP_NAME --resource-group $(RESOURCE_GROUP) --system-assigned
                    APP_ID=$(az containerapp show --name $APP_NAME --resource-group $(RESOURCE_GROUP) --query "identity.principalId" -o tsv)
                  fi

                  echo "$APP_NAME Managed Identity ID: $APP_ID"

                  if [ -z "$APP_ID" ]; then
                    echo "Error: Unable to retrieve principalId for $APP_NAME"
                    exit 1
                  fi

                  echo "Assigning ACR Pull role to $APP_NAME..."
                  az role assignment create \
                    --assignee $APP_ID \
                    --role AcrPull \
                    --scope $(az acr show --name $(ACR_NAME) --query id -o tsv)
                }

                # 執行檢查與權限設定
                check_and_assign_identity "frontend"
                check_and_assign_identity "backend"

                echo "Enabling ACR admin access..."
                az acr update --name $(ACR_NAME) --admin-enabled true

          # 部署前端
          - task: AzureCLI@2
            displayName: 'Deploy Frontend'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az containerapp create \
                  --name frontend \
                  --resource-group $(RESOURCE_GROUP) \
                  --image recommendacr20250226.azurecr.io/frontend:$(Build.BuildId) \
                  --target-port 3000 \
                  --ingress external \
                  --environment $(NODE_ENV) \
                  --env-vars \
                    NODE_ENV=$(NODE_ENV) \
                    VITE_BACKEND_URL=$(VITE_BACKEND_URL)

          # 部署後端
          - task: AzureCLI@2
            displayName: 'Deploy Backend'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az containerapp create \
                  --name backend \
                  --resource-group $(RESOURCE_GROUP) \
                  --image recommendacr20250226.azurecr.io/backend:$(Build.BuildId) \
                  --target-port 5000 \
                  --ingress external \
                  --environment $(NODE_ENV) \
                  --env-vars \
                    FLASK_ENV=$(FLASK_ENV) \
                    DB_HOST=$(DB_HOST) \
                    DB_PORT=$(DB_PORT) \
                    DB_USER=$(DB_USER) \
                    DB_PASSWORD=$(DB_PASSWORD) \
                    DB_NAME=$(DB_NAME)

          # 部署 MySQL
          - task: AzureCLI@2
            displayName: 'Deploy MySQL'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az containerapp create \
                  --name mysql \
                  --resource-group $(RESOURCE_GROUP) \
                  --image mysql:5.7 \
                  --target-port 3306 \
                  --ingress internal \
                  --environment $(NODE_ENV) \
                  --env-vars \
                    MYSQL_ROOT_PASSWORD=$(MYSQL_ROOT_PASSWORD) \
                    MYSQL_DATABASE=$(DB_NAME) \
                    MYSQL_USER=$(DB_USER) \
                    MYSQL_PASSWORD=$(DB_PASSWORD) \
                    MYSQL_ROOT_HOST=% \
                    TZ=$(TZ)