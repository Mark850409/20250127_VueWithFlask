trigger:
  branches:
    include:
      - main
      - master
  paths:
    include:
      - '*'    # 監控所有檔案變更
    exclude:
      - '*.md' # 排除 markdown 檔案變更

resources:
  repositories:
    - repository: self
      type: github
      name: Mark850409/20250127_VueWithFlask  # 請替換成你的 GitHub 倉庫
      endpoint: github-connection  # Azure DevOps 中設定的 GitHub 服務連接名稱

variables:
  - group: flask-variables
  - group: vue-variables
  - group: registry
  - name: DOCKER_BUILDKIT
    value: '1'
  - name: COMPOSE_DOCKER_CLI_BUILD  
    value: '1'
  - name: ACR_NAME
    value: 'recommendacr20250226'  # 請替換成你想要的 ACR 名稱
  - name: RESOURCE_GROUP
    value: 'myrecommendgroup'  # 請替換成你的資源組名稱
  - name: AZURE_SUBSCRIPTION
    value: 'recommend-connection'  # 請替換成你的 Azure 訂用帳戶名稱
  - name: dockerRegistryServiceConnection
    value: 'recommend-docker-connection'  # 請替換成你的 Azure 訂用帳戶名稱
  - name: LOCATION
    value: 'eastasia'  # 請替換成你想要的區域

stages:
# - stage: Infrastructure
#   displayName: 'Setup Infrastructure'
#   jobs:
#   - job: SetupACR
#     displayName: 'Setup Azure Container Registry'
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
#     # 建立資源組（如果不存在）
#     - task: AzureCLI@2
#       displayName: 'Create Resource Group'
#       inputs:
#         azureSubscription: '$(AZURE_SUBSCRIPTION)'
#         scriptType: 'bash'
#         scriptLocation: 'inlineScript'
#         inlineScript: |
#           # 檢查資源群組是否存在
#           if [ "$(az group exists --name $(RESOURCE_GROUP))" = "false" ]; then
#             echo "Creating resource group: $(RESOURCE_GROUP)..."
#             az group create --name $(RESOURCE_GROUP) --location $(LOCATION)
#           else
#             echo "Resource group $(RESOURCE_GROUP) already exists. Skipping creation."
#           fi
#     # 建立 ACR（如果不存在）
#     - task: AzureCLI@2
#       displayName: 'Create ACR'
#       inputs:
#         azureSubscription: '$(AZURE_SUBSCRIPTION)'
#         scriptType: 'bash'
#         scriptLocation: 'inlineScript'
#         inlineScript: |
#           # 檢查 ACR 是否存在
#           if ! az acr show --name $(ACR_NAME) --resource-group $(RESOURCE_GROUP) &>/dev/null; then
#             echo "Creating ACR..."
#             az acr create \
#               --resource-group $(RESOURCE_GROUP) \
#               --name $(ACR_NAME) \
#               --sku Basic \
#               --admin-enabled true
#           else
#             # 確保現有的 ACR 啟用了 admin
#             echo "Enabling admin access for existing ACR..."
#             az acr update --name $(ACR_NAME) --admin-enabled true
#           fi
          
#           # 獲取 ACR 登入資訊
#           ACR_LOGIN_SERVER=$(az acr show --name $(ACR_NAME) --resource-group $(RESOURCE_GROUP) --query loginServer -o tsv)
#           ACR_USERNAME=$(az acr credential show --name $(ACR_NAME) --resource-group $(RESOURCE_GROUP) --query username -o tsv)
#           ACR_PASSWORD=$(az acr credential show --name $(ACR_NAME) --resource-group $(RESOURCE_GROUP) --query "passwords[0].value" -o tsv)
          
#           # 設定 pipeline 變數
#           echo "##vso[task.setvariable variable=REGISTRY_NAME;isOutput=true]$ACR_LOGIN_SERVER"
#           echo "##vso[task.setvariable variable=ACR_USERNAME;isOutput=true]$ACR_USERNAME"
#           echo "##vso[task.setvariable variable=ACR_PASSWORD;isOutput=true;issecret=true]$ACR_PASSWORD"

#       name: acrDetails

# - stage: Build
#   displayName: 'Build and Push'
#   dependsOn: Infrastructure
#   variables:
#     REGISTRY_NAME: $[ stageDependencies.Infrastructure.SetupACR.outputs['acrDetails.REGISTRY_NAME'] ]
#     ACR_USERNAME: $[ stageDependencies.Infrastructure.SetupACR.outputs['acrDetails.ACR_USERNAME'] ]
#     ACR_PASSWORD: $[ stageDependencies.Infrastructure.SetupACR.outputs['acrDetails.ACR_PASSWORD'] ]
#   jobs:
#   - job: BuildAndPush
#     displayName: 'Build and Push Docker Images'
#     pool:
#       vmImage: 'ubuntu-latest'
#     steps:
#     # 檢出程式碼
#     - checkout: self
              
#     # 登入 ACR
#     - task: Docker@2
#       inputs:
#         containerRegistry: '$(dockerRegistryServiceConnection)'
#         command: 'login'
#       displayName: 'Login to ACR'

#     # 建立並推送前端映像
#     - task: Bash@3
#       displayName: 'Build and Push Frontend Image'
#       inputs:
#         targetType: 'inline'
#         script: |
#           docker build -t $(REGISTRY_NAME)/frontend:$(Build.BuildId) \
#                       -t $(REGISTRY_NAME)/frontend:latest \
#                       -f dockerfiles/frontend/Dockerfile_vue .
#           docker push $(REGISTRY_NAME)/frontend:$(Build.BuildId)
#           docker push $(REGISTRY_NAME)/frontend:latest

#     # 建立並推送後端映像
#     - task: Bash@3
#       displayName: 'Build and Push Backend Image'
#       inputs:
#         targetType: 'inline'
#         script: |
#           docker build -t $(REGISTRY_NAME)/backend:$(Build.BuildId) \
#                       -t $(REGISTRY_NAME)/backend:latest \
#                       -f dockerfiles/backend/Dockerfile_python .
#           docker push $(REGISTRY_NAME)/backend:$(Build.BuildId)
#           docker push $(REGISTRY_NAME)/backend:latest

- stage: Deploy
  displayName: 'Deploy to Azure Web App'
  variables:
    REGISTRY_NAME: $[ stageDependencies.Infrastructure.SetupACR.outputs['acrDetails.REGISTRY_NAME'] ]
    ACR_USERNAME: $[ stageDependencies.Infrastructure.SetupACR.outputs['acrDetails.ACR_USERNAME'] ]
    ACR_PASSWORD: $[ stageDependencies.Infrastructure.SetupACR.outputs['acrDetails.ACR_PASSWORD'] ]
    ACR_LOGIN_SERVER: $[ stageDependencies.Infrastructure.SetupACR.outputs['acrDetails.ACR_LOGIN_SERVER'] ]
  condition: succeeded()
  jobs:
  - job: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # 登入並驗證 ACR 連接
    - task: AzureCLI@2
      displayName: 'Login and Verify ACR Connection'
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # 獲取 ACR 登入資訊
          ACR_LOGIN_SERVER=$(az acr show --name $(ACR_NAME) --resource-group $(RESOURCE_GROUP) --query loginServer -o tsv)
          ACR_USERNAME=$(az acr credential show --name $(ACR_NAME) --resource-group $(RESOURCE_GROUP) --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name $(ACR_NAME) --resource-group $(RESOURCE_GROUP) --query "passwords[0].value" -o tsv)

          # 使用 Docker 登入 ACR
          echo "Logging in to ACR..."
          echo $ACR_PASSWORD | docker login $ACR_LOGIN_SERVER -u $ACR_USERNAME --password-stdin
          if [ $? -ne 0 ]; then
            echo "ACR 登入失敗"
            exit 1
          fi

          # 測試 ACR 連接
          echo "Testing ACR connection..."
          az acr repository list --name $(ACR_NAME) --resource-group $(RESOURCE_GROUP)
          if [ $? -ne 0 ]; then
            echo "無法存取 ACR，請檢查權限設定"
            exit 1
          fi
          echo "ACR 登入和連接測試成功"

    # 部署前端 Web App
    - task: AzureCLI@2
      displayName: 'Deploy Frontend Web App'
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # 建立前端 App Service Plan
          az appservice plan create \
            --name frontend-plan \
            --resource-group $(RESOURCE_GROUP) \
            --sku F1 \
            --is-linux

          # 建立並配置前端 Web App
          az webapp create \
            --resource-group $(RESOURCE_GROUP) \
            --plan frontend-plan \
            --name frontend-20250226 \
            --deployment-container-image-name $(ACR_LOGIN_SERVER)/frontend:latest

          # 配置前端環境變數
          az webapp config appsettings set \
            --resource-group $(RESOURCE_GROUP) \
            --name frontend-20250226 \
            --settings \
              NODE_ENV=$(NODE_ENV) \
              VITE_BACKEND_URL=$(VITE_BACKEND_URL)

          # 配置容器設定
          az webapp config container set \
            --resource-group $(RESOURCE_GROUP) \
            --name frontend-20250226 \
            --docker-custom-image-name $(ACR_LOGIN_SERVER)/frontend:latest \
            --docker-registry-server-url https://$(ACR_LOGIN_SERVER) \
            --docker-registry-server-user $(ACR_USERNAME) \
            --docker-registry-server-password $(ACR_PASSWORD)

    # 部署後端 Web App
    - task: AzureCLI@2
      displayName: 'Deploy Backend Web App'
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # 建立後端 App Service Plan
          az appservice plan create \
            --name backend-plan \
            --resource-group $(RESOURCE_GROUP) \
            --sku F1 \
            --is-linux

          # 建立並配置後端 Web App
          az webapp create \
            --resource-group $(RESOURCE_GROUP) \
            --plan backend-plan \
            --name backend-20250226 \
            --deployment-container-image-name $(ACR_LOGIN_SERVER)/backend:latest

          # 配置後端環境變數
          az webapp config appsettings set \
            --resource-group $(RESOURCE_GROUP) \
            --name backend-20250226 \
            --settings \
              FLASK_ENV=$(FLASK_ENV) \
              DB_HOST=$(DB_HOST) \
              DB_PORT=$(DB_PORT) \
              DB_USER=$(DB_USER) \
              DB_PASSWORD=$(DB_PASSWORD) \
              DB_NAME=$(DB_NAME)

          # 配置容器設定
          az webapp config container set \
            --resource-group $(RESOURCE_GROUP) \
            --name backend-20250226 \
            --docker-custom-image-name $(ACR_LOGIN_SERVER)/backend:latest \
            --docker-registry-server-url https://$(ACR_LOGIN_SERVER) \
            --docker-registry-server-user $(ACR_USERNAME) \
            --docker-registry-server-password $(ACR_PASSWORD)

    # 部署 MySQL 資料庫
    - task: AzureCLI@2
      displayName: 'Deploy MySQL Database'
      inputs:
        azureSubscription: '$(AZURE_SUBSCRIPTION)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # 建立 MySQL 伺服器
          az mysql flexible-server create \
            --resource-group $(RESOURCE_GROUP) \
            --name mysql \
            --admin-user $(DB_USER) \
            --admin-password $(DB_PASSWORD) \
            --sku-name Standard_B1ms \
            --version 5.7 \
            --storage-size 10 \
            --database-name $(DB_NAME) \
            --yes

          # 配置防火牆規則
          az mysql flexible-server firewall-rule create \
            --resource-group $(RESOURCE_GROUP) \
            --name mysql \
            --rule-name allowall \
            --start-ip-address 0.0.0.0 \
            --end-ip-address 255.255.255.255

          # 更新後端 Web App 的資料庫連接字串
          az webapp config appsettings set \
            --resource-group $(RESOURCE_GROUP) \
            --name backend-mysql \
            --settings \
              DB_HOST=mysql-20250226.mysql.database.azure.com \
              DB_PORT=3306
  